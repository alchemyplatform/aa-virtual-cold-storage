import { FunctionReference } from '@/utils/types';
import { MultiOwnerPlugin, Plugin, pluginManagerActions } from '@alchemy/aa-accounts';
import {
  AccountNotFoundError,
  ChainNotFoundError,
  IncompatibleClientError,
  isSmartAccountClient,
  type GetAccountParameter,
  type SendUserOperationResult,
  type SmartContractAccount,
  type UserOperationOverrides
} from '@alchemy/aa-core';
import {
  encodeAbiParameters,
  encodeFunctionData,
  encodePacked,
  getContract,
  type Address,
  type Chain,
  type Client,
  type EncodeFunctionDataParameters,
  type GetContractReturnType,
  type Hex,
  type PublicClient,
  type Transport
} from 'viem';

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC6900PluginGen: This file is auto-generated by plugingen
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

type ExecutionActions<TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined> = {
  executeWithStorageKey: (
    args: Pick<
      EncodeFunctionDataParameters<typeof ColdStoragePluginExecutionFunctionAbi, 'executeWithStorageKey'>,
      'args'
    > & { overrides?: UserOperationOverrides } & GetAccountParameter<TAccount>
  ) => Promise<SendUserOperationResult>;

  changeStorageKey: (
    args: Pick<
      EncodeFunctionDataParameters<typeof ColdStoragePluginExecutionFunctionAbi, 'changeStorageKey'>,
      'args'
    > & { overrides?: UserOperationOverrides } & GetAccountParameter<TAccount>
  ) => Promise<SendUserOperationResult>;

  lockErc721All: (
    args: Pick<EncodeFunctionDataParameters<typeof ColdStoragePluginExecutionFunctionAbi, 'lockERC721All'>, 'args'> & {
      overrides?: UserOperationOverrides;
    } & GetAccountParameter<TAccount>
  ) => Promise<SendUserOperationResult>;

  lockErc721Collection: (
    args: Pick<
      EncodeFunctionDataParameters<typeof ColdStoragePluginExecutionFunctionAbi, 'lockERC721Collection'>,
      'args'
    > & { overrides?: UserOperationOverrides } & GetAccountParameter<TAccount>
  ) => Promise<SendUserOperationResult>;

  lockErc721Token: (
    args: Pick<
      EncodeFunctionDataParameters<typeof ColdStoragePluginExecutionFunctionAbi, 'lockERC721Token'>,
      'args'
    > & { overrides?: UserOperationOverrides } & GetAccountParameter<TAccount>
  ) => Promise<SendUserOperationResult>;

  unlockErc721All: (
    args: Pick<
      EncodeFunctionDataParameters<typeof ColdStoragePluginExecutionFunctionAbi, 'unlockERC721All'>,
      'args'
    > & { overrides?: UserOperationOverrides } & GetAccountParameter<TAccount>
  ) => Promise<SendUserOperationResult>;

  unlockErc721Collection: (
    args: Pick<
      EncodeFunctionDataParameters<typeof ColdStoragePluginExecutionFunctionAbi, 'unlockERC721Collection'>,
      'args'
    > & { overrides?: UserOperationOverrides } & GetAccountParameter<TAccount>
  ) => Promise<SendUserOperationResult>;

  unlockErc721Token: (
    args: Pick<
      EncodeFunctionDataParameters<typeof ColdStoragePluginExecutionFunctionAbi, 'unlockERC721Token'>,
      'args'
    > & { overrides?: UserOperationOverrides } & GetAccountParameter<TAccount>
  ) => Promise<SendUserOperationResult>;
};

type InstallArgs = [{ type: 'address'; name: 'storageKey' }];

export type InstallColdStoragePluginParams = {
  args: Parameters<typeof encodeAbiParameters<InstallArgs>>[1];
  pluginAddress?: Address;
  dependencyOverrides?: FunctionReference[];
};

type ManagementActions<TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined> = {
  installColdStoragePlugin: (
    args: {
      overrides?: UserOperationOverrides;
    } & InstallColdStoragePluginParams &
      GetAccountParameter<TAccount>
  ) => Promise<SendUserOperationResult>;
};

type ReadAndEncodeActions = {
  encodeExecuteWithStorageKey: (
    args: Pick<
      EncodeFunctionDataParameters<typeof ColdStoragePluginExecutionFunctionAbi, 'executeWithStorageKey'>,
      'args'
    >
  ) => Hex;

  encodeChangeStorageKey: (
    args: Pick<EncodeFunctionDataParameters<typeof ColdStoragePluginExecutionFunctionAbi, 'changeStorageKey'>, 'args'>
  ) => Hex;

  encodeLockErc721All: (
    args: Pick<EncodeFunctionDataParameters<typeof ColdStoragePluginExecutionFunctionAbi, 'lockERC721All'>, 'args'>
  ) => Hex;

  encodeLockErc721Collection: (
    args: Pick<
      EncodeFunctionDataParameters<typeof ColdStoragePluginExecutionFunctionAbi, 'lockERC721Collection'>,
      'args'
    >
  ) => Hex;

  encodeLockErc721Token: (
    args: Pick<EncodeFunctionDataParameters<typeof ColdStoragePluginExecutionFunctionAbi, 'lockERC721Token'>, 'args'>
  ) => Hex;

  encodeUnlockErc721All: (
    args: Pick<EncodeFunctionDataParameters<typeof ColdStoragePluginExecutionFunctionAbi, 'unlockERC721All'>, 'args'>
  ) => Hex;

  encodeUnlockErc721Collection: (
    args: Pick<
      EncodeFunctionDataParameters<typeof ColdStoragePluginExecutionFunctionAbi, 'unlockERC721Collection'>,
      'args'
    >
  ) => Hex;

  encodeUnlockErc721Token: (
    args: Pick<EncodeFunctionDataParameters<typeof ColdStoragePluginExecutionFunctionAbi, 'unlockERC721Token'>, 'args'>
  ) => Hex;
};

export type ColdStoragePluginActions<
  TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined
> = ExecutionActions<TAccount> & ManagementActions<TAccount> & ReadAndEncodeActions;

const addresses = {
  421614: '0x63008C1f1a179C4109C8c176C174106328Bd3521' as Address
} as Record<number, Address>;

export const ColdStoragePlugin: Plugin<typeof ColdStoragePluginAbi> = {
  meta: {
    name: 'Cold Storage Plugin',
    version: '0.1.0',
    addresses
  },
  getContract: <C extends Client>(
    client: C,
    address?: Address
  ): GetContractReturnType<typeof ColdStoragePluginAbi, PublicClient, Address> => {
    if (!client.chain) throw new ChainNotFoundError();

    return getContract({
      address: address || addresses[client.chain.id],
      abi: ColdStoragePluginAbi,
      client: client
    });
  }
};

export const coldStoragePluginActions: <
  TTransport extends Transport = Transport,
  TChain extends Chain | undefined = Chain | undefined,
  TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined
>(
  client: Client<TTransport, TChain, TAccount>
) => ColdStoragePluginActions<TAccount> = (client) => ({
  executeWithStorageKey({ args, overrides, account = client.account }) {
    if (!account) {
      throw new AccountNotFoundError();
    }
    if (!isSmartAccountClient(client)) {
      throw new IncompatibleClientError('SmartAccountClient', 'executeWithStorageKey', client);
    }

    const uo = encodeFunctionData({
      abi: ColdStoragePluginExecutionFunctionAbi,
      functionName: 'executeWithStorageKey',
      args
    });

    return client.sendUserOperation({ uo, overrides, account });
  },
  changeStorageKey({ args, overrides, account = client.account }) {
    if (!account) {
      throw new AccountNotFoundError();
    }
    if (!isSmartAccountClient(client)) {
      throw new IncompatibleClientError('SmartAccountClient', 'changeStorageKey', client);
    }

    const uo = encodeFunctionData({
      abi: ColdStoragePluginExecutionFunctionAbi,
      functionName: 'changeStorageKey',
      args
    });

    return client.sendUserOperation({ uo, overrides, account });
  },
  lockErc721All({ args, overrides, account = client.account }) {
    if (!account) {
      throw new AccountNotFoundError();
    }
    if (!isSmartAccountClient(client)) {
      throw new IncompatibleClientError('SmartAccountClient', 'lockErc721All', client);
    }

    const uo = encodeFunctionData({
      abi: ColdStoragePluginExecutionFunctionAbi,
      functionName: 'lockERC721All',
      args
    });

    return client.sendUserOperation({ uo, overrides, account });
  },
  lockErc721Collection({ args, overrides, account = client.account }) {
    if (!account) {
      throw new AccountNotFoundError();
    }
    if (!isSmartAccountClient(client)) {
      throw new IncompatibleClientError('SmartAccountClient', 'lockErc721Collection', client);
    }

    const uo = encodeFunctionData({
      abi: ColdStoragePluginExecutionFunctionAbi,
      functionName: 'lockERC721Collection',
      args
    });

    return client.sendUserOperation({ uo, overrides, account });
  },
  lockErc721Token({ args, overrides, account = client.account }) {
    if (!account) {
      throw new AccountNotFoundError();
    }
    if (!isSmartAccountClient(client)) {
      throw new IncompatibleClientError('SmartAccountClient', 'lockErc721Token', client);
    }

    const uo = encodeFunctionData({
      abi: ColdStoragePluginExecutionFunctionAbi,
      functionName: 'lockERC721Token',
      args
    });

    return client.sendUserOperation({ uo, overrides, account });
  },
  unlockErc721All({ overrides, account = client.account }) {
    if (!account) {
      throw new AccountNotFoundError();
    }
    if (!isSmartAccountClient(client)) {
      throw new IncompatibleClientError('SmartAccountClient', 'unlockErc721All', client);
    }

    const uo = encodeFunctionData({
      abi: ColdStoragePluginExecutionFunctionAbi,
      functionName: 'unlockERC721All'
    });

    return client.sendUserOperation({ uo, overrides, account });
  },
  unlockErc721Collection({ args, overrides, account = client.account }) {
    if (!account) {
      throw new AccountNotFoundError();
    }
    if (!isSmartAccountClient(client)) {
      throw new IncompatibleClientError('SmartAccountClient', 'unlockErc721Collection', client);
    }

    const uo = encodeFunctionData({
      abi: ColdStoragePluginExecutionFunctionAbi,
      functionName: 'unlockERC721Collection',
      args
    });

    return client.sendUserOperation({ uo, overrides, account });
  },
  unlockErc721Token({ args, overrides, account = client.account }) {
    if (!account) {
      throw new AccountNotFoundError();
    }
    if (!isSmartAccountClient(client)) {
      throw new IncompatibleClientError('SmartAccountClient', 'unlockErc721Token', client);
    }

    const uo = encodeFunctionData({
      abi: ColdStoragePluginExecutionFunctionAbi,
      functionName: 'unlockERC721Token',
      args
    });

    return client.sendUserOperation({ uo, overrides, account });
  },
  installColdStoragePlugin({ account = client.account, overrides, ...params }) {
    if (!account) {
      throw new AccountNotFoundError();
    }

    if (!isSmartAccountClient(client)) {
      throw new IncompatibleClientError('SmartAccountClient', 'installColdStoragePlugin', client);
    }

    const chain = client.chain;
    if (!chain) {
      throw new ChainNotFoundError();
    }

    const dependencies = params.dependencyOverrides ?? [
      (() => {
        const pluginAddress = MultiOwnerPlugin.meta.addresses[chain.id];
        if (!pluginAddress) {
          throw new Error('missing MultiOwnerPlugin address for chain ' + chain.name);
        }

        return encodePacked(['address', 'uint8'], [pluginAddress, 0x0]);
      })(),

      (() => {
        const pluginAddress = MultiOwnerPlugin.meta.addresses[chain.id];
        if (!pluginAddress) {
          throw new Error('missing MultiOwnerPlugin address for chain ' + chain.name);
        }

        return encodePacked(['address', 'uint8'], [pluginAddress, 0x1]);
      })()
    ];
    const pluginAddress = params.pluginAddress ?? (ColdStoragePlugin.meta.addresses[chain.id] as Address | undefined);

    if (!pluginAddress) {
      throw new Error('missing ColdStoragePlugin address for chain ' + chain.name);
    }

    return client.extend(pluginManagerActions).installPlugin({
      pluginAddress,
      pluginInitData: encodeAbiParameters([{ type: 'address', name: 'storageKey' }], params.args),
      dependencies,
      overrides,
      account
    });
  },
  encodeExecuteWithStorageKey({ args }) {
    return encodeFunctionData({
      abi: ColdStoragePluginExecutionFunctionAbi,
      functionName: 'executeWithStorageKey',
      args
    });
  },
  encodeChangeStorageKey({ args }) {
    return encodeFunctionData({
      abi: ColdStoragePluginExecutionFunctionAbi,
      functionName: 'changeStorageKey',
      args
    });
  },
  encodeLockErc721All({ args }) {
    return encodeFunctionData({
      abi: ColdStoragePluginExecutionFunctionAbi,
      functionName: 'lockERC721All',
      args
    });
  },
  encodeLockErc721Collection({ args }) {
    return encodeFunctionData({
      abi: ColdStoragePluginExecutionFunctionAbi,
      functionName: 'lockERC721Collection',
      args
    });
  },
  encodeLockErc721Token({ args }) {
    return encodeFunctionData({
      abi: ColdStoragePluginExecutionFunctionAbi,
      functionName: 'lockERC721Token',
      args
    });
  },
  encodeUnlockErc721All() {
    return encodeFunctionData({
      abi: ColdStoragePluginExecutionFunctionAbi,
      functionName: 'unlockERC721All'
    });
  },
  encodeUnlockErc721Collection({ args }) {
    return encodeFunctionData({
      abi: ColdStoragePluginExecutionFunctionAbi,
      functionName: 'unlockERC721Collection',
      args
    });
  },
  encodeUnlockErc721Token({ args }) {
    return encodeFunctionData({
      abi: ColdStoragePluginExecutionFunctionAbi,
      functionName: 'unlockERC721Token',
      args
    });
  }
});

export const ColdStoragePluginExecutionFunctionAbi = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' }
        ]
      }
    ],
    name: 'executeWithStorageKey',
    outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'storageKey', internalType: 'address', type: 'address' }],
    name: 'changeStorageKey',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'duration', internalType: 'uint48', type: 'uint48' }],
    name: 'lockERC721All',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'locks',
        internalType: 'struct IColdStoragePlugin.ERC721CollectionLock[]',
        type: 'tuple[]',
        components: [
          { name: 'contractAddress', internalType: 'address', type: 'address' },
          { name: 'duration', internalType: 'uint48', type: 'uint48' }
        ]
      }
    ],
    name: 'lockERC721Collection',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'locks',
        internalType: 'struct IColdStoragePlugin.ERC721TokenLock[]',
        type: 'tuple[]',
        components: [
          {
            name: 'token',
            internalType: 'struct IColdStoragePlugin.ERC721Token',
            type: 'tuple',
            components: [
              {
                name: 'contractAddress',
                internalType: 'address',
                type: 'address'
              },
              { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
            ]
          },
          { name: 'duration', internalType: 'uint48', type: 'uint48' }
        ]
      }
    ],
    name: 'lockERC721Token',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unlockERC721All',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'collections', internalType: 'address[]', type: 'address[]' }],
    name: 'unlockERC721Collection',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'tokens',
        internalType: 'struct IColdStoragePlugin.ERC721Token[]',
        type: 'tuple[]',
        components: [
          { name: 'contractAddress', internalType: 'address', type: 'address' },
          { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ],
    name: 'unlockERC721Token',
    outputs: []
  }
] as const;

export const ColdStoragePluginAbi = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'storageKey', internalType: 'address', type: 'address' }],
    name: 'changeStorageKey',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'erc721AllLocks',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' }
        ]
      }
    ],
    name: 'executeWithStorageKey',
    outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getERC721Locks',
    outputs: [
      { name: 'allDuration', internalType: 'uint48', type: 'uint48' },
      {
        name: 'collectionLocks',
        internalType: 'struct IColdStoragePlugin.ERC721CollectionLock[]',
        type: 'tuple[]',
        components: [
          { name: 'contractAddress', internalType: 'address', type: 'address' },
          { name: 'duration', internalType: 'uint48', type: 'uint48' }
        ]
      },
      {
        name: 'tokenLocks',
        internalType: 'struct IColdStoragePlugin.ERC721TokenLock[]',
        type: 'tuple[]',
        components: [
          {
            name: 'token',
            internalType: 'struct IColdStoragePlugin.ERC721Token',
            type: 'tuple',
            components: [
              {
                name: 'contractAddress',
                internalType: 'address',
                type: 'address'
              },
              { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
            ]
          },
          { name: 'duration', internalType: 'uint48', type: 'uint48' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'collection', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'isERC721TokenLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'duration', internalType: 'uint48', type: 'uint48' }],
    name: 'lockERC721All',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'locks',
        internalType: 'struct IColdStoragePlugin.ERC721CollectionLock[]',
        type: 'tuple[]',
        components: [
          { name: 'contractAddress', internalType: 'address', type: 'address' },
          { name: 'duration', internalType: 'uint48', type: 'uint48' }
        ]
      }
    ],
    name: 'lockERC721Collection',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'locks',
        internalType: 'struct IColdStoragePlugin.ERC721TokenLock[]',
        type: 'tuple[]',
        components: [
          {
            name: 'token',
            internalType: 'struct IColdStoragePlugin.ERC721Token',
            type: 'tuple',
            components: [
              {
                name: 'contractAddress',
                internalType: 'address',
                type: 'address'
              },
              { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
            ]
          },
          { name: 'duration', internalType: 'uint48', type: 'uint48' }
        ]
      }
    ],
    name: 'lockERC721Token',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes', type: 'bytes' }],
    name: 'onInstall',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
    name: 'onUninstall',
    outputs: []
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'pluginManifest',
    outputs: [
      {
        name: '',
        internalType: 'struct PluginManifest',
        type: 'tuple',
        components: [
          { name: 'interfaceIds', internalType: 'bytes4[]', type: 'bytes4[]' },
          {
            name: 'dependencyInterfaceIds',
            internalType: 'bytes4[]',
            type: 'bytes4[]'
          },
          {
            name: 'executionFunctions',
            internalType: 'bytes4[]',
            type: 'bytes4[]'
          },
          {
            name: 'permittedExecutionSelectors',
            internalType: 'bytes4[]',
            type: 'bytes4[]'
          },
          {
            name: 'permitAnyExternalAddress',
            internalType: 'bool',
            type: 'bool'
          },
          { name: 'canSpendNativeToken', internalType: 'bool', type: 'bool' },
          {
            name: 'permittedExternalCalls',
            internalType: 'struct ManifestExternalCallPermission[]',
            type: 'tuple[]',
            components: [
              {
                name: 'externalAddress',
                internalType: 'address',
                type: 'address'
              },
              { name: 'permitAnySelector', internalType: 'bool', type: 'bool' },
              { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' }
            ]
          },
          {
            name: 'userOpValidationFunctions',
            internalType: 'struct ManifestAssociatedFunction[]',
            type: 'tuple[]',
            components: [
              {
                name: 'executionSelector',
                internalType: 'bytes4',
                type: 'bytes4'
              },
              {
                name: 'associatedFunction',
                internalType: 'struct ManifestFunction',
                type: 'tuple',
                components: [
                  {
                    name: 'functionType',
                    internalType: 'enum ManifestAssociatedFunctionType',
                    type: 'uint8'
                  },
                  { name: 'functionId', internalType: 'uint8', type: 'uint8' },
                  {
                    name: 'dependencyIndex',
                    internalType: 'uint256',
                    type: 'uint256'
                  }
                ]
              }
            ]
          },
          {
            name: 'runtimeValidationFunctions',
            internalType: 'struct ManifestAssociatedFunction[]',
            type: 'tuple[]',
            components: [
              {
                name: 'executionSelector',
                internalType: 'bytes4',
                type: 'bytes4'
              },
              {
                name: 'associatedFunction',
                internalType: 'struct ManifestFunction',
                type: 'tuple',
                components: [
                  {
                    name: 'functionType',
                    internalType: 'enum ManifestAssociatedFunctionType',
                    type: 'uint8'
                  },
                  { name: 'functionId', internalType: 'uint8', type: 'uint8' },
                  {
                    name: 'dependencyIndex',
                    internalType: 'uint256',
                    type: 'uint256'
                  }
                ]
              }
            ]
          },
          {
            name: 'preUserOpValidationHooks',
            internalType: 'struct ManifestAssociatedFunction[]',
            type: 'tuple[]',
            components: [
              {
                name: 'executionSelector',
                internalType: 'bytes4',
                type: 'bytes4'
              },
              {
                name: 'associatedFunction',
                internalType: 'struct ManifestFunction',
                type: 'tuple',
                components: [
                  {
                    name: 'functionType',
                    internalType: 'enum ManifestAssociatedFunctionType',
                    type: 'uint8'
                  },
                  { name: 'functionId', internalType: 'uint8', type: 'uint8' },
                  {
                    name: 'dependencyIndex',
                    internalType: 'uint256',
                    type: 'uint256'
                  }
                ]
              }
            ]
          },
          {
            name: 'preRuntimeValidationHooks',
            internalType: 'struct ManifestAssociatedFunction[]',
            type: 'tuple[]',
            components: [
              {
                name: 'executionSelector',
                internalType: 'bytes4',
                type: 'bytes4'
              },
              {
                name: 'associatedFunction',
                internalType: 'struct ManifestFunction',
                type: 'tuple',
                components: [
                  {
                    name: 'functionType',
                    internalType: 'enum ManifestAssociatedFunctionType',
                    type: 'uint8'
                  },
                  { name: 'functionId', internalType: 'uint8', type: 'uint8' },
                  {
                    name: 'dependencyIndex',
                    internalType: 'uint256',
                    type: 'uint256'
                  }
                ]
              }
            ]
          },
          {
            name: 'executionHooks',
            internalType: 'struct ManifestExecutionHook[]',
            type: 'tuple[]',
            components: [
              {
                name: 'executionSelector',
                internalType: 'bytes4',
                type: 'bytes4'
              },
              {
                name: 'preExecHook',
                internalType: 'struct ManifestFunction',
                type: 'tuple',
                components: [
                  {
                    name: 'functionType',
                    internalType: 'enum ManifestAssociatedFunctionType',
                    type: 'uint8'
                  },
                  { name: 'functionId', internalType: 'uint8', type: 'uint8' },
                  {
                    name: 'dependencyIndex',
                    internalType: 'uint256',
                    type: 'uint256'
                  }
                ]
              },
              {
                name: 'postExecHook',
                internalType: 'struct ManifestFunction',
                type: 'tuple',
                components: [
                  {
                    name: 'functionType',
                    internalType: 'enum ManifestAssociatedFunctionType',
                    type: 'uint8'
                  },
                  { name: 'functionId', internalType: 'uint8', type: 'uint8' },
                  {
                    name: 'dependencyIndex',
                    internalType: 'uint256',
                    type: 'uint256'
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'pluginMetadata',
    outputs: [
      {
        name: '',
        internalType: 'struct PluginMetadata',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'version', internalType: 'string', type: 'string' },
          { name: 'author', internalType: 'string', type: 'string' },
          {
            name: 'permissionDescriptors',
            internalType: 'struct SelectorPermission[]',
            type: 'tuple[]',
            components: [
              {
                name: 'functionSelector',
                internalType: 'bytes4',
                type: 'bytes4'
              },
              {
                name: 'permissionDescription',
                internalType: 'string',
                type: 'string'
              }
            ]
          }
        ]
      }
    ]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'functionId', internalType: 'uint8', type: 'uint8' },
      { name: 'preExecHookData', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'postExecutionHook',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'functionId', internalType: 'uint8', type: 'uint8' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'preExecutionHook',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'functionId', internalType: 'uint8', type: 'uint8' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'preRuntimeValidationHook',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'functionId', internalType: 'uint8', type: 'uint8' },
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256'
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256'
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256'
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' }
        ]
      },
      { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'preUserOpValidationHook',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes', type: 'bytes' }],
    name: 'removeSelector',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'functionId', internalType: 'uint8', type: 'uint8' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'runtimeValidationFunction',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'storageKeyOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'storageKeys',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unlockERC721All',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'collections', internalType: 'address[]', type: 'address[]' }],
    name: 'unlockERC721Collection',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'tokens',
        internalType: 'struct IColdStoragePlugin.ERC721Token[]',
        type: 'tuple[]',
        components: [
          { name: 'contractAddress', internalType: 'address', type: 'address' },
          { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ],
    name: 'unlockERC721Token',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'functionId', internalType: 'uint8', type: 'uint8' },
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256'
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256'
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256'
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' }
        ]
      },
      { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' }
    ],
    name: 'userOpValidationFunction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'locks',
        internalType: 'struct IColdStoragePlugin.ERC721CollectionLock[]',
        type: 'tuple[]',
        components: [
          { name: 'contractAddress', internalType: 'address', type: 'address' },
          { name: 'duration', internalType: 'uint48', type: 'uint48' }
        ],
        indexed: false
      }
    ],
    name: 'ERC721CollectionsLocked'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'duration',
        internalType: 'uint48',
        type: 'uint48',
        indexed: false
      }
    ],
    name: 'ERC721Locked'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'locks',
        internalType: 'struct IColdStoragePlugin.ERC721TokenLock[]',
        type: 'tuple[]',
        components: [
          {
            name: 'token',
            internalType: 'struct IColdStoragePlugin.ERC721Token',
            type: 'tuple',
            components: [
              {
                name: 'contractAddress',
                internalType: 'address',
                type: 'address'
              },
              { name: 'tokenId', internalType: 'uint256', type: 'uint256' }
            ]
          },
          { name: 'duration', internalType: 'uint48', type: 'uint48' }
        ],
        indexed: false
      }
    ],
    name: 'ERC721TokensLocked'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'oldStorageKey',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'newStorageKey',
        internalType: 'address',
        type: 'address',
        indexed: true
      }
    ],
    name: 'StorageKeyChanged'
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  { type: 'error', inputs: [], name: 'ColdStorageAccessDenied' },
  { type: 'error', inputs: [], name: 'InvalidAction' },
  {
    type: 'error',
    inputs: [{ name: 'caller', internalType: 'address', type: 'address' }],
    name: 'NotContractCaller'
  },
  {
    type: 'error',
    inputs: [
      { name: 'selector', internalType: 'bytes4', type: 'bytes4' },
      { name: 'functionId', internalType: 'uint8', type: 'uint8' }
    ],
    name: 'NotImplemented'
  },
  { type: 'error', inputs: [], name: 'NotInitialized' }
] as const;
